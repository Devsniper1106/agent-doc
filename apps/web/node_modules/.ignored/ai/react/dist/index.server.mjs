var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// react/tokens.tsx
import { Suspense } from "react";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
function Tokens(props) {
  return __async(this, null, function* () {
    const { stream } = props;
    const reader = stream.getReader();
    return /* @__PURE__ */ jsx(Suspense, { children: /* @__PURE__ */ jsx(RecursiveTokens, { reader }) });
  });
}
function RecursiveTokens(_0) {
  return __async(this, arguments, function* ({ reader }) {
    const { done, value } = yield reader.read();
    if (done) {
      return null;
    }
    const text = new TextDecoder().decode(value);
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      text,
      /* @__PURE__ */ jsx(Suspense, { fallback: null, children: /* @__PURE__ */ jsx(RecursiveTokens, { reader }) })
    ] });
  });
}
export {
  Tokens
};
