{"version":3,"file":"tiptap-markdown.esm.js","sources":["../src/extensions/tiptap/tight-lists.js","../src/util/markdown.js","../src/serialize/state.js","../src/extensions/marks/html.js","../src/util/dom.js","../src/extensions/nodes/html.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/index.js","../src/util/extensions.js","../src/serialize/MarkdownSerializer.js","../src/parse/MarkdownParser.js","../src/extensions/tiptap/clipboard.js","../src/Markdown.js"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\n\nexport const MarkdownTightLists = Extension.create({\n    name: 'markdownTightLists',\n    addOptions: () => ({\n        tight: true,\n        tightClass: 'tight',\n        listTypes: [\n            'bulletList',\n            'orderedList',\n        ],\n    }),\n    addGlobalAttributes() {\n        return [\n            {\n                types: this.options.listTypes,\n                attributes: {\n                    tight: {\n                        default: this.options.tight,\n                        parseHTML: element =>\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\n                        renderHTML: attributes => ({\n                            class: attributes.tight ? this.options.tightClass : null,\n                            'data-tight': attributes.tight ? 'true' : null,\n                        }),\n                    },\n                },\n            },\n        ]\n    },\n    addCommands() {\n        return {\n            toggleTight: (tight = null) => ({ editor, commands }) => {\n                function toggleTight(name) {\n                    if(!editor.isActive(name)) {\n                        return false;\n                    }\n                    const attrs = editor.getAttributes(name);\n                    return commands.updateAttributes(name, {\n                        tight: tight ?? !attrs?.tight,\n                    });\n                }\n                return this.options.listTypes\n                    .some(name => toggleTight(name));\n            }\n        }\n    },\n});\n","import markdownit from 'markdown-it';\n\n\nfunction scanDelims(text, pos) {\n    const state = new (markdownit().inline.State)(text, null, null, []);\n    return state.scanDelims(pos, true);\n}\n\nexport function shiftDelim(text, delim, start, offset) {\n    let res = text.substring(0, start) + text.substring(start + delim.length);\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\n    return res;\n}\n\nfunction trimStart(text, delim, from, to) {\n    let pos = from, res = text;\n    while(pos < to) {\n        if(scanDelims(res, pos).can_open) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, 1);\n        pos++;\n    }\n    return { text: res, from: pos, to }\n}\n\nfunction trimEnd(text, delim, from, to) {\n    let pos = to, res = text;\n    while(pos > from) {\n        if(scanDelims(res, pos).can_close) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, -1);\n        pos--;\n    }\n    return { text: res, from, to: pos }\n}\n\nexport function trimInline(text, delim, from, to) {\n    let state = {\n        text,\n        from,\n        to,\n    }\n\n    state = trimStart(state.text, delim, state.from, state.to);\n    state = trimEnd(state.text, delim, state.from, state.to);\n\n    if(state.to - state.from < delim.length + 1) {\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\n    }\n\n    return state.text;\n}\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\nimport { trimInline } from \"../util/markdown\";\n\n\n/**\n * Override default MarkdownSerializerState to:\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\n */\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\n\n    constructor(nodes, marks, options) {\n        super(nodes, marks, options ?? {});\n        this.inlines = [];\n    }\n\n    render(node, parent, index) {\n        super.render(node, parent, index);\n        const top = this.inlines[this.inlines.length - 1];\n        if(top?.start && top?.end) {\n            const { delimiter, start, end } = this.normalizeInline(top);\n            this.out = trimInline(this.out, delimiter, start, end);\n            this.inlines.pop();\n        }\n    }\n\n    markString(mark, open, parent, index) {\n        const info = this.marks[mark.type.name]\n        if(info.expelEnclosingWhitespace) {\n            if(open) {\n                this.inlines.push({\n                    start: this.out.length,\n                    delimiter: info.open,\n                });\n            } else {\n                const top = this.inlines.pop();\n                this.inlines.push({\n                    ...top,\n                    end: this.out.length,\n                });\n            }\n        }\n        return super.markString(mark, open, parent, index);\n    }\n\n    normalizeInline(inline) {\n        let { start, end } = inline;\n        while(this.out.charAt(start).match(/\\s/)) {\n            start++;\n        }\n        return {\n            ...inline,\n            start,\n        }\n    }\n}\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\n\n\nexport default Mark.create({\n    name: 'markdownHTMLMark',\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {\n                    open(state, mark)  {\n                        if(!this.editor.storage.markdown.options.html) {\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[0] ?? '';\n                    },\n                    close(state, mark) {\n                        if(!this.editor.storage.markdown.options.html) {\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[1] ?? '';\n                    },\n                },\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n});\n\nfunction getMarkTags(mark) {\n    const schema = mark.type.schema;\n    const node = schema.text(' ', [mark]);\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\n    return match ? [match[1], match[2]] : null;\n}\n","\n\nexport function elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`\n\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n\nexport function escapeHTML(value) {\n    return value\n        ?.replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\nexport function extractElement(node) {\n    const parent = node.parentElement;\n    const prepend = parent.cloneNode();\n\n    while(parent.firstChild && parent.firstChild !== node) {\n        prepend.appendChild(parent.firstChild);\n    }\n\n    if(prepend.childNodes.length > 0) {\n        parent.parentElement.insertBefore(prepend, parent);\n    }\n    parent.parentElement.insertBefore(node, parent);\n    if(parent.childNodes.length === 0) {\n        parent.remove();\n    }\n}\n\nexport function unwrapElement(node) {\n    const parent = node.parentNode;\n\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\n\n    parent.removeChild(node);\n}\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\nimport { elementFromString } from \"../../util/dom\";\n\n\nexport default Node.create({\n    name: 'markdownHTMLNode',\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(this.editor.storage.markdown.options.html) {\n                        state.write(serializeHTML(node, parent));\n                    } else {\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\n                        state.write(`[${node.type.name}]`);\n                    }\n                    if(node.isBlock) {\n                        state.closeBlock(node);\n                    }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n\nfunction serializeHTML(node, parent) {\n    const schema = node.type.schema;\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n\n    if(node.isBlock && parent.type.name === schema.topNodeType.name) {\n        return formatBlock(html);\n    }\n\n    return html;\n}\n\n/**\n * format html block as per the commonmark spec\n */\nfunction formatBlock(html) {\n    const dom = elementFromString(html);\n    const element = dom.firstElementChild;\n\n    element.innerHTML = element.innerHTML.trim()\n        ? `\\n${element.innerHTML}\\n`\n        : `\\n`;\n\n    return element.outerHTML;\n}\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Blockquote = Node.create({\n    name: 'blockquote',\n});\n\nexport default Blockquote.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst BulletList = Node.create({\n    name: 'bulletList',\n});\n\nexport default BulletList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst CodeBlock = Node.create({\n    name: 'codeBlock',\n});\n\nexport default CodeBlock.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\n                    state.text(node.textContent, false);\n                    state.ensureNewLine();\n                    state.write(\"```\");\n                    state.closeBlock(node);\n                },\n                parse: {\n                    setup(markdownit) {\n                        markdownit.set({\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\n                        });\n                    },\n                    updateDOM(element) {\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\n                    },\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst HardBreak = Node.create({\n    name: 'hardBreak',\n});\n\nexport default HardBreak.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.hard_break,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Heading = Node.create({\n    name: 'heading',\n});\n\nexport default Heading.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.heading,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst HorizontalRule = Node.create({\n    name: 'horizontalRule',\n});\n\nexport default HorizontalRule.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Image = Node.create({\n    name: 'image',\n});\n\nexport default Image.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.image,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst ListItem = Node.create({\n    name: 'listItem',\n});\n\nexport default ListItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.list_item,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst OrderedList = Node.create({\n    name: 'orderedList',\n});\n\nexport default OrderedList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.ordered_list,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Paragraph = Node.create({\n    name: 'paragraph',\n});\n\nexport default Paragraph.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","\n\nexport function childNodes(node) {\n    return node?.content?.content ?? [];\n}\n","import { Node } from \"@tiptap/core\";\nimport { childNodes } from \"../../util/prosemirror\";\nimport HTMLNode from './html';\n\nconst Table = Node.create({\n    name: 'table',\n});\n\nexport default Table.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(!isMarkdownSerializable(node)) {\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\n                        return;\n                    }\n                    node.forEach((row, p, i) => {\n                        state.write('| ');\n                        row.forEach((col, p, j) => {\n                            if(j) {\n                                state.write(' | ');\n                            }\n                            const cellContent = col.firstChild;\n                            if(cellContent.textContent.trim()) {\n                                state.renderInline(cellContent);\n                            }\n                        });\n                        state.write(' |')\n                        state.ensureNewLine();\n                        if(!i) {\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\n                            state.write(`| ${delimiterRow} |`);\n                            state.ensureNewLine();\n                        }\n                    });\n                    state.closeBlock(node);\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n})\n\n\nfunction hasSpan(node) {\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\n}\n\nfunction isMarkdownSerializable(node) {\n    const rows = childNodes(node);\n    const firstRow = rows[0];\n    const bodyRows = rows.slice(1);\n\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell))) {\n        return false;\n    }\n\n    if(bodyRows.some(row =>\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell))\n    )) {\n        return false;\n    }\n\n    return true;\n}\n","import { Node } from \"@tiptap/core\";\n\n\nconst TaskItem = Node.create({\n    name: 'taskItem',\n});\n\nexport default TaskItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\n                    state.write(`${check} `);\n                    state.renderContent(node);\n                },\n                parse: {\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.task-list-item')]\n                            .forEach(item => {\n                                const input = item.querySelector('input');\n                                item.setAttribute('data-type', 'taskItem');\n                                if(input) {\n                                    item.setAttribute('data-checked', input.checked);\n                                    input.remove();\n                                }\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import taskListPlugin from \"markdown-it-task-lists\";\nimport { Node } from \"@tiptap/core\";\nimport BulletList from \"./bullet-list\";\n\n\nconst TaskList = Node.create({\n    name: 'taskList',\n});\n\nexport default TaskList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: BulletList.storage.markdown.serialize,\n                parse: {\n                    setup(markdownit) {\n                        markdownit.use(taskListPlugin);\n                    },\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.contains-task-list')]\n                            .forEach(list => {\n                                list.setAttribute('data-type', 'taskList');\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { escapeHTML } from \"../../util/dom\";\n\n\nconst Text = Node.create({\n    name: 'text',\n});\n\nexport default Text.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.text(escapeHTML(node.text));\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Bold = Mark.create({\n    name: 'bold',\n});\n\nexport default Bold.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.strong,\n                parse: {\n                    // handled by markdown-it\n                }\n            },\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Code = Mark.create({\n    name: 'code',\n});\n\nexport default Code.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.code,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Italic = Mark.create({\n    name: 'italic',\n});\n\nexport default Italic.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.em,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Link = Mark.create({\n    name: 'link',\n});\n\nexport default Link.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.link,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\n\n\nconst Strike = Mark.create({\n    name: 'strike',\n});\n\nexport default Strike.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","import Blockquote from \"./nodes/blockquote\";\nimport BulletList from \"./nodes/bullet-list\";\nimport CodeBlock from \"./nodes/code-block\";\nimport HardBreak from \"./nodes/hard-break\";\nimport Heading from \"./nodes/heading\";\nimport HorizontalRule from \"./nodes/horizontal-rule\";\nimport HTMLNode from \"./nodes/html\";\nimport Image from \"./nodes/image\";\nimport ListItem from \"./nodes/list-item\";\nimport OrderedList from \"./nodes/ordered-list\";\nimport Paragraph from \"./nodes/paragraph\";\nimport Table from \"./nodes/table\";\nimport TaskItem from \"./nodes/task-item\";\nimport TaskList from \"./nodes/task-list\";\nimport Text from \"./nodes/text\";\n\nimport Bold from \"./marks/bold\";\nimport Code from \"./marks/code\";\nimport HTMLMark from \"./marks/html\";\nimport Italic from \"./marks/italic\";\nimport Link from \"./marks/link\";\nimport Strike from \"./marks/strike\";\n\n\nexport default [\n    Blockquote,\n    BulletList,\n    CodeBlock,\n    HardBreak,\n    Heading,\n    HorizontalRule,\n    HTMLNode,\n    Image,\n    ListItem,\n    OrderedList,\n    Paragraph,\n    Table,\n    TaskItem,\n    TaskList,\n    Text,\n\n    Bold,\n    Code,\n    HTMLMark,\n    Italic,\n    Link,\n    Strike,\n]\n","import markdownExtensions from \"../extensions\";\n\n\nexport function getMarkdownSpec(extension) {\n    const markdownSpec = extension.storage?.markdown;\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\n\n    if(markdownSpec || defaultMarkdownSpec) {\n        return {\n            ...defaultMarkdownSpec,\n            ...markdownSpec,\n        };\n    }\n\n    return null;\n}\n","import { MarkdownSerializerState } from './state';\nimport HTMLMark from \"../extensions/marks/html\";\nimport HTMLNode from \"../extensions/nodes/html\";\nimport { getMarkdownSpec } from \"../util/extensions\";\nimport HardBreak from \"../extensions/nodes/hard-break\";\n\n\nexport class MarkdownSerializer {\n    /**\n     * @type {import('@tiptap/core').Editor}\n     */\n    editor = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    serialize(content) {\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\n            hardBreakNodeName: HardBreak.name,\n        });\n\n        state.renderContent(content);\n\n        return state.out;\n    }\n\n    get nodes() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.nodes)\n                    .map(name => [name, this.serializeNode(HTMLNode)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\n                    .map(extension => [extension.name, this.serializeNode(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    get marks() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.marks)\n                    .map(name => [name, this.serializeMark(HTMLMark)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\n                    .map(extension => [extension.name, this.serializeMark(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    serializeNode(node) {\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\n    }\n\n    serializeMark(mark) {\n        const serialize = getMarkdownSpec(mark)?.serialize;\n        return serialize\n            ? {\n                ...serialize,\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\n            }\n            : null\n    }\n}\n\n","import markdownit from \"markdown-it\";\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\nimport { getMarkdownSpec } from \"../util/extensions\";\n\n\nexport class MarkdownParser {\n    /**\n     * @type {import('@tiptap/core').Editor}\n     */\n    editor = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    parse(content, { inline } = {}) {\n        const {\n            html,\n            linkify,\n            breaks,\n        } = this.editor.storage.markdown.options;\n\n        if(typeof content === 'string') {\n            const renderer = markdownit({\n                html,\n                linkify,\n                breaks,\n            });\n\n            this.editor.extensionManager.extensions.forEach(extension =>\n                getMarkdownSpec(extension)?.parse?.setup?.call({ editor:this.editor, options:extension.options }, renderer)\n            );\n\n            const renderedHTML = renderer.render(content);\n            const element = elementFromString(renderedHTML);\n\n            this.editor.extensionManager.extensions.forEach(extension =>\n                getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor:this.editor, options:extension.options }, element)\n            );\n\n            this.normalizeDOM(element, { inline, content });\n\n            return element.innerHTML;\n        }\n\n        return content;\n    }\n\n    normalizeDOM(node, { inline, content } = {}) {\n        this.normalizeBlocks(node);\n\n        if(inline) {\n            this.normalizeInline(node, content);\n        }\n\n        return node;\n    }\n\n    normalizeBlocks(node) {\n        const blocks = Object.values(this.editor.schema.nodes)\n            .filter(node => node.isBlock);\n\n        const selector = blocks\n            .map(block => block.spec.parseDOM?.map(spec => spec.tag))\n            .flat()\n            .filter(Boolean)\n            .join(',');\n\n        if(!selector) {\n            return;\n        }\n\n        [...node.querySelectorAll(selector)].forEach(el => {\n            if(el.parentElement.matches('p')) {\n                extractElement(el);\n            }\n        });\n    }\n\n    normalizeInline(node, content) {\n        if(node.firstElementChild?.matches('p')) {\n            const firstParagraph = node.firstElementChild;\n            const { nextSibling, nextElementSibling } = firstParagraph;\n            const startSpaces = content.match(/^\\s+/)?.[0] ?? '';\n            const endSpaces = !nextElementSibling\n                ? content.match(/\\s+$/)?.[0] ?? ''\n                : '';\n\n            if(nextSibling?.nodeType === Node.TEXT_NODE) {\n                nextSibling.textContent = nextSibling.textContent.replace(/^\\n/, '');\n            }\n\n            if(content.match(/^\\n\\n/)) {\n                firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\n                return;\n            }\n\n            unwrapElement(firstParagraph);\n\n            node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\n        }\n    }\n}\n\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nimport { DOMParser } from '@tiptap/pm/model';\nimport { elementFromString } from \"../../util/dom\";\n\nexport const MarkdownClipboard = Extension.create({\n    name: 'markdownClipboard',\n    addOptions() {\n        return {\n            transformPastedText: false,\n            transformCopiedText: false,\n        }\n    },\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('markdownClipboard'),\n                props: {\n                    clipboardTextParser: (text, context, plainText) => {\n                        if(plainText || !this.options.transformPastedText) {\n                            return null; // pasting with shift key prevents formatting\n                        }\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\n                        return DOMParser.fromSchema(this.editor.schema)\n                            .parseSlice(elementFromString(parsed), { preserveWhitespace: true });\n                    },\n                    /**\n                     * @param {import('prosemirror-model').Slice} slice\n                     */\n                    clipboardTextSerializer: (slice) => {\n                        if(!this.options.transformCopiedText) {\n                            return null;\n                        }\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\n                    },\n                },\n            })\n        ]\n    }\n})\n","import { Extension, extensions } from '@tiptap/core';\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\n\nexport const Markdown = Extension.create({\n    name: 'markdown',\n    priority: 50,\n    addOptions() {\n        return {\n            html: true,\n            tightLists: true,\n            tightListClass: 'tight',\n            bulletListMarker: '-',\n            linkify: false,\n            breaks: false,\n            transformPastedText: false,\n            transformCopiedText: false,\n        }\n    },\n    addCommands() {\n        const commands = extensions.Commands.config.addCommands();\n        return {\n            setContent: (content, emitUpdate, parseOptions) => (props) => {\n                return commands.setContent(\n                    props.editor.storage.markdown.parser.parse(content),\n                    emitUpdate,\n                    parseOptions\n                )(props);\n            },\n            insertContentAt: (range, content, options) => (props) => {\n                return commands.insertContentAt(\n                    range,\n                    props.editor.storage.markdown.parser.parse(content, { inline: true }),\n                    options\n                )(props);\n            },\n        }\n    },\n    onBeforeCreate() {\n        this.editor.storage.markdown = {\n            options: { ...this.options },\n            parser: new MarkdownParser(this.editor),\n            serializer: new MarkdownSerializer(this.editor),\n            getMarkdown: () => {\n                return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\n            },\n        }\n        this.editor.options.initialContent = this.editor.options.content;\n        this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\n    },\n    onCreate() {\n        this.editor.options.content = this.editor.options.initialContent;\n        delete this.editor.options.initialContent;\n    },\n    addStorage() {\n        return {\n            /// storage will be defined in onBeforeCreate() to prevent initial object overriding\n        }\n    },\n    addExtensions() {\n        return [\n            MarkdownTightLists.configure({\n                tight: this.options.tightLists,\n                tightClass: this.options.tightListClass,\n            }),\n            MarkdownClipboard.configure({\n                transformPastedText: this.options.transformPastedText,\n                transformCopiedText: this.options.transformCopiedText,\n            }),\n        ]\n    },\n});\n"],"names":["MarkdownTightLists","Extension","create","name","addOptions","tight","tightClass","listTypes","addGlobalAttributes","_this","types","options","attributes","parseHTML","element","getAttribute","querySelector","renderHTML","addCommands","_this2","toggleTight","arguments","length","undefined","_ref","editor","commands","isActive","attrs","getAttributes","updateAttributes","some","scanDelims","text","pos","state","markdownit","inline","State","shiftDelim","delim","start","offset","res","substring","trimStart","from","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","_BaseMarkdownSerializ","_inherits","_super","_createSuper","nodes","marks","_classCallCheck","call","inlines","_createClass","key","value","render","node","parent","index","_get","_getPrototypeOf","prototype","top","end","_this$normalizeInline","normalizeInline","delimiter","out","pop","markString","mark","open","info","type","expelEnclosingWhitespace","push","_objectSpread","charAt","match","BaseMarkdownSerializerState","Mark","addStorage","markdown","serialize","_getMarkTags$","_getMarkTags","storage","html","console","warn","concat","getMarkTags","close","_getMarkTags$2","_getMarkTags2","parse","schema","getHTMLFromFragment","Fragment","elementFromString","wrappedValue","window","DOMParser","parseFromString","body","escapeHTML","replace","extractElement","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","insertBefore","remove","unwrapElement","parentNode","removeChild","Node","write","serializeHTML","isBlock","closeBlock","topNodeType","formatBlock","dom","firstElementChild","innerHTML","trim","outerHTML","Blockquote","extend","defaultMarkdownSerializer","blockquote","BulletList","renderList","bulletListMarker","CodeBlock","language","textContent","ensureNewLine","setup","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","HardBreak","hard_break","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","ordered_list","Paragraph","paragraph","_node$content$content","_node$content","content","Table","isMarkdownSerializable","HTMLNode","forEach","row","p","i","col","j","cellContent","renderInline","delimiterRow","Array","childCount","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","slice","cell","TaskItem","check","checked","renderContent","_toConsumableArray","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","strong","Code","code","Italic","em","Link","link","Strike","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownSerializer","_defineProperty","hardBreakNodeName","get","_this$editor$extensio","Object","fromEntries","keys","serializeNode","extensionManager","extensions","filter","_this$editor$extensio2","serializeMark","_getMarkdownSpec","_getMarkdownSpec$seri","bind","_getMarkdownSpec2","MarkdownParser","_this$editor$storage$","linkify","breaks","renderer","_getMarkdownSpec$pars","_getMarkdownSpec$pars2","renderedHTML","_getMarkdownSpec2$par","_getMarkdownSpec2$par2","normalizeDOM","_ref2","normalizeBlocks","blocks","values","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","el","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextSibling","nextElementSibling","startSpaces","endSpaces","nodeType","TEXT_NODE","MarkdownClipboard","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","PluginKey","props","clipboardTextParser","context","plainText","parsed","parser","fromSchema","parseSlice","preserveWhitespace","clipboardTextSerializer","serializer","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}